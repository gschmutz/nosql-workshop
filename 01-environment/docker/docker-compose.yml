# =======================================================================
# Platform Name            nosql-platform
# Platform Stack:          trivadis/platys-modern-data-platform
# Platform Stack Version:  1.13.0-preview
# =======================================================================
version: '3.5'
networks:
  default:
    name: nosql-platform
# Enable PostgreSQL or MySQL for MLflow server
services:
  #  ================================== Zeppelin ========================================== #
  zeppelin:
    image: trivadis/apache-zeppelin:0.9.0-spark2.4-hadoop2.8
    container_name: zeppelin
    hostname: zeppelin
    labels:
      com.platys.webui.title: Apache Zeppelin UI
      com.platys.webui.url: http://${PUBLIC_IP}:28080
    ports:
      - 28080:8080
      - 6060:6060
      - 5050:5050
      - 4050-4054:4050-4054
    env_file:
      - ./conf/hadoop.env
    environment:
      SPARK_DEFAULTS_CONF_spark_jars_repositories:
      SPARK_DEFAULTS_CONF_spark_jars_packages:
      SPARK_DEFAULTS_CONF_spark_jars_excludes:
      SPARK_DEFAULTS_CONF_spark_jars:
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings:
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: /spark/conf/hive-site.xml
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions:
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions:
      ZEPPELIN_ADDR: 0.0.0.0
      ZEPPELIN_PORT: '8080'
      ZEPPELIN_MEM: -Xms1024m -Xmx1024m -XX:MaxMetaspaceSize=512m
      ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT: 120000
      ZEPPELIN_INTERPRETER_DEP_MVNREPO: https://repo.maven.apache.org/maven2
      ZEPPELIN_ADMIN_USERNAME: admin
      ZEPPELIN_ADMIN_PASSWORD: abc123!
      ZEPPELIN_USER_USERNAME: zeppelin
      ZEPPELIN_USER_PASSWORD: abc123!
      # set spark-master for Zeppelin interpreter
      ZEPPELIN_SPARK_MASTER: spark://spark-master:7077
      ZEPPELIN_NOTEBOOK_CRON_ENABLE: 'True'
      PYSPARK_PYTHON: python3
      SPARK_SUBMIT_OPTIONS: ' --conf spark.ui.port=4050 --conf spark.driver.host=${DOCKER_HOST_IP} --conf spark.driver.port=5050 --conf spark.driver.bindAddress=0.0.0.0 --conf spark.blockManager.port=6060 --conf spark.driver.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4 --conf spark.executor.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4'
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
      - ./conf/s3cfg:/root/.s3cfg.template
    restart: unless-stopped
  #  ================================== Jupyter ========================================== #
  jupyter:
    image: jupyter/minimal-notebook:latest
    container_name: jupyter
    hostname: jupyter
    labels:
      com.platys.webui.title: Jupyter UI
      com.platys.webui.url: http://${PUBLIC_IP}:28888
    ports:
      - 28888:8888
    environment:
      JUPYTER_ENABLE_LAB: 'true'
      JUPYTER_TOKEN: abc123!
      GRANT_SUDO: 'true'
      TINI_SUBREAPER: 'true'
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Grafana ========================================== #
  grafana:
    image: grafana/grafana:8.1.2
    hostname: grafana
    container_name: grafana
    labels:
      com.platys.webui.title: Grafana UI
      com.platys.webui.url: http://${PUBLIC_IP}:3000
    expose:
      - 3000
    ports:
      - 3000:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=abc123!
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/grafana:/etc/grafana/provisioning
    restart: unless-stopped
  #  ================================== Redis ========================================== #
  redis-1:
    image: bitnami/redis:6.0.15
    hostname: redis-1
    container_name: redis-1
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
      - DISABLE_COMMANDS=None
      - REDIS_PASSWORD=abc123!
      - REDIS_AOF_ENABLED=no
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    hostname: redis-insight
    labels:
      com.platys.webui.title: Redis Insight UI
      com.platys.webui.url: http://${PUBLIC_IP}:28174
    ports:
      - 28174:8001
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    hostname: redis-commander
    labels:
      com.platys.webui.title: Redis Commander UI
      com.platys.webui.url: http://${PUBLIC_IP}:28119
    ports:
      - 28119:8081
    environment:
      - REDIS_HOST=redis-1
      - REDIS_PORT=6379
      - REDIS_PASSWORD='abc123!'
      - REDIS_DB=0
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Cassandra ========================================== #
  cassandra-1:
    image: cassandra:4.0
    container_name: cassandra-1
    hostname: cassandra-1
    ports:
      - 29042:9042
      - 7199:7199
      - 9160:9160
    environment:
      - CASSANDRA_SEEDS=cassandra-1
      - CASSANDRA_CLUSTER_NAME="Test Cluster"
      - CASSANDRA_DC=se1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
#      - LOCAL_JMX=no
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  cassandra-web:
    image: trivadis/cassandra-web
    container_name: cassandra-web
    hostname: cassandra-web
    labels:
      com.platys.webui.title: Cassandra Web UI
      com.platys.webui.url: http://${PUBLIC_IP}:28120
    ports:
      - 28120:3000
    environment:
      - CASSANDRA_HOSTNAME=cassandra-1
      - CASSANDRA_PORT=9042
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== MongoDB ========================================== #
  mongo-1:
    image: mongo:5.0
    container_name: mongo-1
    hostname: mongo-1
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_DATABASE=sample
      - MONGO_INITDB_USERNAME=admin
      - MONGO_INITDB_PASSWORD=admin
    volumes:
      - ./data-transfer:/data-transfer
      # seeding scripts
      - ./conf/mongo-entrypoint:/docker-entrypoint-initdb.d
    restart: unless-stopped
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    hostname: mongo-express
    labels:
      com.platys.webui.title: Cassandra Web UI
      com.platys.webui.url: http://${PUBLIC_IP}:28123
    ports:
      - 28123:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-1
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  admin-mongo:
    image: adicom/admin-mongo:latest
    container_name: admin-mongo
    hostname: admin-mongo
    labels:
      com.platys.webui.title: Admin Mongo UI
      com.platys.webui.url: http://${PUBLIC_IP}:28124
    ports:
      - 28124:1234
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Elasticsearch ========================================== #
  elasticsearch-1:
    image: elasticsearch:7.14.0
    hostname: elasticsearch-1
    container_name: elasticsearch-1
    labels:
      com.platys.restapi.title: Elasticsearch REST API
      com.platys.restapi.url: http://${PUBLIC_IP}:9200
      com.platys.manual.step.msgs: sudo sysctl -w vm.max_map_count=262144
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'
      xpack.monitoring.enabled: 'false'
      http.cors.enabled: 'true'
      http.cors.allow-origin: http://dejavu:1358,http://dataplatform:28125,http://analyticsplatform:28125,http://${PUBLIC_IP}:28125,http://${DOCKER_HOST_IP}:28125,http://127.0.0.1:1358
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      http.cors.allow-credentials: 'true'
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  dejavu:
    image: appbaseio/dejavu:latest
    container_name: dejavu
    hostname: dejuvu
    labels:
      com.platys.webui.title: Elasticsearch Dejavu UI
      com.platys.webui.url: http://${PUBLIC_IP}:28125
    ports:
      - 28125:1358
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  cerebro:
    image: lmenezes/cerebro:latest
    container_name: cerebro
    hostname: cerebro
    labels:
      com.platys.webui.title: Elasticsearch Cerbero UI
      com.platys.webui.url: http://${PUBLIC_IP}:28126
    ports:
      - 28126:9000
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  elastichq:
    image: elastichq/elasticsearch-hq:latest
    container_name: elastichq
    hostname: elatichq
    labels:
      com.platys.webui.title: ElasticHQ UI
      com.platys.webui.url: http://${PUBLIC_IP}:28127
    ports:
      - 28127:5000
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Kibana ========================================== #
  kibana:
    image: kibana:7.14.0
    hostname: kibana
    container_name: kibana
    labels:
      com.platys.webui.title: Kibana UI
      com.platys.webui.url: http://${PUBLIC_IP}:5601
    depends_on:
      - elasticsearch-1
    ports:
      - 5601:5601
    environment:
      discovery.type: single-node
      ELASTICSEARCH_HOSTS: http://elasticsearch-1:9200
      SERVER_HOST: 0.0.0.0
      SERVER_NAME: kibana
      XPACK_GRAPH_enabled: 'false'
      XPACK_MONITORING_enabled: 'false'
      XPACK_REPORTING_enabled: 'false'
      XPACK_SECURITY_enabled: 'false'
    volumes:
      - ./data-transfer:/data-transfer
    command: [/bin/bash, -c, /usr/share/kibana/bin/kibana-plugin remove x-pack; /usr/local/bin/kibana-docker]
    restart: unless-stopped
     #  ================================== Neo4J ========================================== #
  neo4j-1:
    image: neo4j:4.2
    hostname: neo4j-1
    container_name: neo4j-1
    labels:
      com.platys.webui.title: Neo4J UI
      com.platys.webui.url: http://${PUBLIC_IP}:7474
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_HEAP_MEMORY=2048
      - NEO4J_CACHE_MEMORY=1G
      - NEO4J_AUTH=neo4j/abc123!
    volumes:
      - ./data-transfer:/data-transfer
#      - "./conf/neo4j/neo4j.conf:/conf/neo4j.conf"
      - ./plugins/neo4j/:/plugins
    restart: unless-stopped
  #  ================================== InfluxData InfluxDB ========================================== #
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    hostname: influxdb
    labels:
      com.platys.restapi.title: InfluxDB Rest API
      com.platys.restapi.url: http://${PUBLIC_IP}:8086
    ports:
      - 8086:8086
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
    restart: unless-stopped
  influxdb-ui:
    image: timeseriesadmin/timeseriesadmin:latest
    container_name: influxdb-ui
    hostname: influxdb-ui
    labels:
      com.platys.webui.title: InfluxDB UI
      com.platys.webui.url: http://${PUBLIC_IP}:28128
    ports:
      - 28128:80
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== InfluxData Chronograf ========================================== #
  chronograf:
    image: chronograf:1.9
    hostname: chronograf
    container_name: chronograf
    labels:
      com.platys.webui.title: Chronograf UI
      com.platys.webui.url: http://${PUBLIC_IP}:28129
    depends_on:
      - influxdb
    ports:
      - 28129:8888
    environment:
      RESOURCES_PATH: /usr/share/chronograf/resources
      PORT: 8888
      HOST: chronograf
      INFLUXDB_URL: http://influxdb:8086
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== InfluxData Telegraf ========================================== #
  telegraf:
    image: telegraf:1.19
    container_name: telegraf
    hostname: telegraf
    environment:
      HOSTNAME: telegraf
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  #  ================================== PostgreSQL ========================================== #
  postgresql:
    image: postgres:13
    container_name: postgresql
    hostname: postgresql
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=abc123!
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_MULTIPLE_DATABASES=demodb
      - POSTGRES_MULTIPLE_USERS=demo
      - POSTGRES_MULTIPLE_PASSWORDS=abc123!
      - PGDATA=/var/lib/postgresql/data/pgdata
      - DB_SCHEMA=demo
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/postgresql:/docker-entrypoint-initdb.d/
    restart: unless-stopped
  #  ================================== Adminer ========================================== #
  adminer:
    image: adminer:latest
    container_name: adminer
    hostname: adminer
    labels:
      com.platys.webui.title: Adminer UI
      com.platys.webui.url: http://${PUBLIC_IP}:28131
    ports:
      - 28131:8080
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== cAdvisor ========================================== #
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.36.0
    container_name: cadvisor
    hostname: cadvisor
    labels:
      com.platys.webui.title: cAdvisor UI
      com.platys.webui.url: http://${PUBLIC_IP}:28138
    ports:
      - 28138:8080
    volumes:
      - ./data-transfer:/data-transfer
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    devices:
      - /dev/kmsg
    tty: true
    privileged: true
    restart: unless-stopped
  #  ================================== cAdvisor ========================================== #
  wetty:
    image: svenihoney/wetty:latest
    container_name: wetty
    hostname: wetty
    labels:
      com.platys.webui.title: WeTTY UI
      com.platys.webui.url: http://${PUBLIC_IP}:3001
    ports:
      - 3001:3000
    environment:
      - REMOTE_SSH_SERVER=${DOCKER_HOST_IP}
      - REMOTE_SSH_PORT=22
      - REMOTE_SSH_USER=
      - WETTY_PORT=3000
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== markdown-viewer ========================================== #
  markdown-viewer:
    image: trivadis/markdown-web:latest
    container_name: markdown-viewer
    hostname: markdown-viewer
    labels:
      com.platys.webui.title: Markdown Viewer UI
      com.platys.webui.url: http://${PUBLIC_IP}:80
    ports:
      - 80:80
    volumes:
      - ./documentation:/home/python/markdown
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  markdown-renderer:
    image: trivadis/jinja2-renderer:latest
    container_name: markdown-renderer
    hostname: markdown-renderer
    environment:
      USE_PUBLIC_IP: 'True'
      PUBLIC_IP: ${PUBLIC_IP}
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DATAPLATFORM_HOME: ${DATAPLATFORM_HOME}
    volumes:
      - ./documentation/templates:/templates
      - ./documentation/templates:/scripts
      - .:/variables
      - ./documentation:/output
      - ./data-transfer:/data-transfer
